{
  "hash": "6a4d31eca3c226a2f0b12a16ba633b94",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\n---\n\n\nOrganizing, managing, and executing reproducible research projects is hard because there are so many possible reasons why a project cannot be reproduced.\n\n    - No data? Not reproducible.\n    - No code? Not reproducible.\n    - Software is unavailable? Not reproducible.\n    - Computational environment is unspecified? Maybe.\n    - Software versions are unknown? Eventually no.\n    \nWe think that we have one of these threats to reproducibility whipped, then some unexpected development or complication throws it all back in doubt.\nI think this is especially true for someone like me: an intermediate R user who has no background in computer science or programming other than what I have learned on my own in the last couple years.\nThis post reflects on my learning how to use `renv` as part of a reproducible research workflow and how I have handled a couple problems along the way.\n\n# Welcome `renv`\n\nThe `renv` package solves (more or less) the software versioning issue.\nWith a couple commands all R package versions are recorded in a file, allowing the R package environment of the project to be rebuilt from scratch.\nI have used `renv` for several months now and have appreciated how much it has simplified the task of installing and staying current with package updates.\nIt has also streamlined the storage of R packages on my computer.\n\nIn a nutshell, here's how it works.\nOnce `renv` is installed `init()` creates a lockfile (`renv.lock`) that holds package version information and details about how packages were installed.\nFor example, if a package is installed from github, that is recorded along with the username of the repository.\nWhen the project is shared, the lockfile can be read by `restore()` to install all packages exactly as they are recorded.\nThe `snapshot()` function adds additional packages as they are installed in the project and `status()` reports packages that need to be installed and/or added to the lockfile.\nIt's really that easy! \n\n# First Headache\n\nLearning to use `renv` and incorporating it into my workflow wasn't without a couple headaches.\nAt the start, I couldn't use `renv::`install()` which works similarly to base `renv::install.packages()` but is more flexible and intuitive.\nI would run `renv::`install(\"somepackage\")` and an error would be returned, to the effect that \"package 'somepackage' is not available\"\nYet `utils::install.packages()`, the \"base\" package installation function (utils is part of the R distribution), worked just fine.\n\nApparently many others have had this [problem](https://community.rstudio.com/t/cant-install-packages-with-renv/96696). \nWhat it came down to for me is that R and `renv` were using different download methods.\nThese methods can be checked using `getOption(\"download.file.method\")` and `renv:::renv_download_method()` for R and `renv` respectively.\nIt seems for me (on Windows) that the two available methods are `lib` and `libcurl`.\nThese are closely related software libraries/tools created and maintained by the cURL (Client for URLs) project which enable internet file transfers.\n\nI resolved this problem by including one line in my Rstudio project `.Rprofile` file: `Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = \"libcurl\")`.\nBeing in the `.Rprofile` within the project, this command is always run when loading up the project in Rstudio.\nA more robust solution that dynamically retrieves the download method currently used by R is what I use now: `Sys.setenv(RENV_DOWNLOAD_METHOD = getOption(\"download.file.method\"))`\n(see this [stackoverflow question](https://stackoverflow.com/questions/73759605/r-renv-suddently-broke-and-now-i-cant-download-any-packages))\n\n# Second Headache\n\nThat first problem seemed to happen again some months later.\nAgain, `renv::install()` would return an error stating that the package was not available.\nApparently, the repository being targeted by `renv` was the issue.\nI don't know what caused it, but I am guessing some update in the backend of renv or its dependencies was responsible.\n\nThe call `getOption(\"repos\")` returns the repository currently being used which for me was something like `https://packagemanager.posit.co/cran/`.\nI resolved the problem by manually setting the \"repos\" option in my project's `.Rprofile` file.\nThus after solving these two headaches, I start new Rstudio projects using `renv` with my `.Rprofile` looking like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"renv/activate.R\")\n\nSys.setenv(RENV_DOWNLOAD_FILE_METHOD = getOption(\"download.file.method\"))\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n```\n:::\n\n\n# Unanticipated Benefits\n\nThe above problems were really not too hard to resolve even for someone with a limited software knowledge base like me.\nThe documentation and support provided by Kevin Ushey, principal developer of `renv`, and the rest of the Posit team really is superb.\nI have no doubt that this package will remain stable and functioning going ahead.\n\nAs I have adopted `renv` into my normal project workflow I have discovered a few benefits beyond supporting research reproducibility.\nFirst, the `renv::install()` and `renv::update()` functions are very smooth and intuitive, much better than `utils::install.packages()`.\nIn particular, I run `renv::update()` every week or month to automatically update all project packages - including `renv` itself!\nBoth functions are faster than the `utils` function and provide more informative errors.\n\nA second benefit is the efficient caching of R packages on my computer.\nAfter the first hundred or so installed packages, the disk space required becomes noticeable.\nBefore `renv`, I occasionally installed packages twice in different locations and accumulated different versions over time.\n`renv` keeps a common cache for the device which it then links to in individual `renv` projects.\nThis means that for a given package and version, it will only ever be installed once.\nMy computer only has a 200GB hard drive so saving a GB here or there is very nice.\n\nA third benefit is the quick installation of new-to-me packages.\nOften dependencies are already included and built in my cache so all `renv` has to do is link to the cache for that dependency.\nThus, downloads and builds from binaries are minimized and new packages are ready to use in mere moments.\n\nI think all scientists and researchers who use R and who are committed to research reproducibility should adopt `renv` into their workflow.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}